---
global:
  postgresqlSecretName: 'dagster-postgresql-secret'
  # The DAGSTER_HOME env var is set by default on all nodes from this value
  dagsterHome: '/opt/dagster/dagster_home'

  # A service account name to use for this chart and all subcharts. If this is set, then
  # dagster subcharts will not create their own service accounts.
  serviceAccountName: ''

  # The name for the secret used to pass Celery broker and backend connection urls. This can
  # generally be left as the default, but can be useful if setting generateCeleryConfigSecret
  # to false below.
  celeryConfigSecretName: 'dagster-celery-config-secret'

nameOverride: ''
fullnameOverride: ''
rbacEnabled: true
# Specify secrets to run containers based on images in private registries. See:
# https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod
imagePullSecrets: []

####################################################################################################
# Dagster Webserver: Configuration for the Dagster webserver
####################################################################################################
dagsterWebserver:
  replicaCount: 1
  image:
    ### Scythe This will be our custom webserver image
    repository: 'docker.io/dagster/dagster-celery-k8s'
    tag: ~
    pullPolicy: Always

  ### This will override the name of our image used above.. Left it here
  ### In the event we want to do that. Also added an example
  nameOverride: 'scythe-dagster-webserver'
  service:
    type: ClusterIP
    port: 80
  annotations: {}
  enableReadOnly: false
  dbStatementTimeout: ~
  dbPoolRecycle: ~
  logLevel: ~
  # Webserver ENV Example:
  #
  # env:
  # - name: ENV_ONE
  #   value: "one"
  # - name: ENV_TWO
  #   value: "two"
  env: []
  envConfigMaps: []

  # Additional environment variables can be retrieved and set from Secrets. See:
  # https://kubernetes.io/docs/concepts/configuration/secret/#use-case-as-container-environment-variables
  #
  # Example:
  #
  # envSecrets:
  #   - name: secret
  envSecrets: []
  deploymentLabels: {}
  labels: {}
  volumes: []
  volumeMounts: []
  annotations: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  initContainerResources: {}
  readinessProbe:
    httpGet:
      path: '/server_info'
      port: 80
    periodSeconds: 20
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  livenessProbe: {}
  startupProbe:
    enabled: false

####################################################################################################
# Compute Log Manager: Configuration for the compute log manager.
#
# By default, NoOpComputeLogManager is set as a compute log manager. As a result, stdout and stderr
# logs will be unavailable in the Dagster UI. To change this behavior, choose a compute log
# manager with a storage backend to capture and persist stdout and stderr logs.
#
# See https://docs.dagster.io/deployment/dagster-instance#compute-log-storage for more information.
####################################################################################################
computeLogManager:
  # Type can be one of [
  #   NoOpComputeLogManager,
  #   AzureBlobComputeLogManager,
  #   GCSComputeLogManager,
  #   S3ComputeLogManager,
  #   CustomComputeLogManager,
  # ]
  type: NoOpComputeLogManager
  config: {}

pythonLogs: {}
dagster-user-deployments:
  # Creates a workspace file with the gRPC servers hosting your user code.
  enabled: true
  enableSubchart: true
  imagePullSecrets: []
  deployments:
    - name: 'k8s-example-user-code-1'
      image:
        repository: 'docker.io/dagster/user-code-example'
        tag: ~
        pullPolicy: Always
      dagsterApiGrpcArgs:
        - '--python-file'
        - '/example_project/example_repo/repo.py'
      port: 3030
      includeConfigInLaunchedRuns:
        enabled: true
      env: []
      envConfigMaps: []
      envSecrets: []
      labels: {}
      volumes: []
      volumeMounts: []
      initContainers: []
      sidecarContainers: []
      annotations: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      podSecurityContext: {}
      securityContext: {}
      resources: {}
      readinessProbe:
        enabled: true
        periodSeconds: 20
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 1
      livenessProbe: {}
      startupProbe:
        enabled: false

      service:
        annotations: {}

####################################################################################################
# Scheduler: Configuration for the scheduler
####################################################################################################
scheduler:
  type: DagsterDaemonScheduler
  config: {}

####################################################################################################
# Run Launcher: Configuration for run launcher
# wasn't sure if we needed this piece
####################################################################################################
runLauncher:
  type: K8sRunLauncher
  config:
    k8sRunLauncher:
      imagePullPolicy: 'Always'
      jobNamespace: ~
      loadInclusterConfig: true
      kubeconfigFile: ~
      envConfigMaps: []
      envSecrets: []
      envVars: []
      volumes: []
      volumeMounts: []
      labels: {}
      resources: {}
      failPodOnRunFailure: false
      securityContext: ~
      runK8sConfig: {}
    celeryK8sRunLauncher:
      imagePullPolicy: 'Always'
      image:
        repository: 'docker.io/dagster/dagster-celery-k8s'
        tag: ~
        pullPolicy: Always
      jobNamespace: ~
      nameOverride: 'celery-workers'
      configSource: {}
      workerQueues:
        - name: 'dagster'
          replicaCount: 2
          labels: {}
          nodeSelector: {}
          configSource: {}
          additionalCeleryArgs: []
      env: {}
      envConfigMaps: []
      envSecrets: []
      annotations: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      podSecurityContext: {}
      securityContext: {}
      resources: {}
      livenessProbe:
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      volumes: []
      volumeMounts: []
      labels: {}
      failPodOnRunFailure: false

####################################################################################################
### Scythe I think we will be setting this to false and using RDS
####################################################################################################
postgresql:
  enabled: true
  image:
    repository: 'library/postgres'
    tag: '14.6'
    pullPolicy: IfNotPresent
  postgresqlHost: ''
  postgresqlUsername: test
  postgresqlPassword: test
  postgresqlDatabase: test
  postgresqlParams: {}
  postgresqlScheme: ''
  service:
    port: 5432

generatePostgresqlPasswordSecret: true
generateCeleryConfigSecret: true

rabbitmq:
  enabled: false

redis:
  enabled: false

flower:
  enabled: false

####################################################################################################
# Ingress: (Optional) Create ingresses for the Dagster webserver and Flower
####################################################################################################
ingress:
  enabled: true
  annotations: {}
  labels: {}
  ingressClassName: alb

  dagsterWebserver:
    path: '/*'
    pathType: ImplementationSpecific
    host: ''
    tls:
      enabled: false
      secretName: ''
    precedingPaths: []
    succeedingPaths: []

####################################################################################################
# Dagster Daemon (Optional) Deploy a daemon for launching queued runs and running schedules and
# sensors.
#
# By default, this daemon is included in your deployment and used to run schedules and sensors.
# Setting `enabled` to false will stop the daemon from being included in your deployment.
#
# Each thread in the daemon periodically sends heartbeats to indicate that it is still running.
# Setting `heartbeatTolerance` lets you configure how long each thread can run without sending
# a heartbeat before the daemon determines that one must be hanging and restarts the process.
#
# Setting `config.queuedRunCoordinator.maxConcurrentRuns` in `runCoordinator` allows you to set
# limits on the total number of runs that can execute at once.
####################################################################################################
dagsterDaemon:
  enabled: true

  image:
    # When a tag is not supplied for a Dagster provided image,
    # it will default as the Helm chart version.
    ### Scythe image possibly..
    repository: 'docker.io/dagster/dagster-celery-k8s'
    tag: ~
    pullPolicy: Always

  heartbeatTolerance: 1800

  runCoordinator:
    enabled: true
    type: QueuedRunCoordinator
    config:
      queuedRunCoordinator:
        maxConcurrentRuns: ~
        tagConcurrencyLimits: []
        dequeueIntervalSeconds: ~
        dequeueUseThreads: true
        dequeueNumWorkers: 4
  runMonitoring:
    enabled: true
    startTimeoutSeconds: 300
    pollIntervalSeconds: 120
    maxResumeRunAttempts: 0
    freeSlotsAfterRunEndSeconds: 0
  runRetries:
    enabled: true
    maxRetries: 0
  sensors:
    useThreads: true
    numWorkers: 4
  schedules:
    useThreads: true
    numWorkers: 4
  env: []
  envConfigMaps: []
  envSecrets: []
  deploymentLabels: {}
  labels: {}
  volumes: []
  volumeMounts: []
  annotations: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  initContainerResources: {}
  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}

####################################################################################################
# busybox: Configuration for the busybox image used to check connections
# Is this even needed?
####################################################################################################
busybox:
  image:
    repository: 'docker.io/busybox'
    tag: '1.28'
    pullPolicy: 'IfNotPresent'

migrate:
  enabled: false

telemetry:
  enabled: true

serviceAccount:
  create: true
  name: ''
  annotations: {}

retention:
  enabled: false

additionalInstanceConfig: {}

####################################################################################################
# [DEPRECATED] Pipeline Run
#
# This config can now be set with dagster-user-deployments.
####################################################################################################
pipelineRun:
  image:
    repository: 'docker.io/dagster/user-code-example'
    tag: ~
    pullPolicy: Always
  env: {}
